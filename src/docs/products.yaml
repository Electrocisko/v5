components:
  requestBodies:
    newProduct:
      type: object
      properties:
        name:
          type: String
          description: Name that uniquely identifies the product
        description:
          type: String
          description: description of the product and its characteristics
        category:
          type: String
          description: category group that the product belongs to
        price:
          type: Number
        stock:
          type: Number
        thumbnail:
          type: String
          description: the name of the product image file
      example:
        name: Product Test 
        description: dummy product to test
        category: vajillas
        price: 22000
        stock: 10
  schemas:
    Product:
      type: object
      properties: 
        -id:
          type: ObjectId
          description: An id autogenerated by mongo db atlas
        name:
          type: String
          description: Name that uniquely identifies the product
        description:
          type: String
          description: description of the product and its characteristics
        category:
          type: String
          description: category group that the product belongs to
        price:
          type: Number
        stock:
          type: Number
        thumbnail:
          type: String
          description: the name of the product image file
      example:
        _id: ObjectId("637cfc513d4ec92e3355de65")
        name: Jarra de Crema
        description: La cremera pertenece al juego de té y llega a la mesa cuando se sirve café o té.
        category: vajillas
        price: 22000
        stock: 10
        thumbnail: 1669135441835-cremera.jpg 
paths:
  /api/products:
    get:
      summary: 'Gets all the products in the database'
      tags:
        - Products
      responses:
        '200':
          description: the products were obtained successfully
          content: 
            applicaction/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: enter a new product in the database
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/newProduct"
      responses:
        "201":
          description: "the product was added successfully"
        "400":
          description: "values incomplete"
        "500":
          description: "couldnt save products"
  /api/products/{id}:
    get:
      summary: Gets the product with given id
      tags:
        - Products
      parameters:
      - name: id
        in: path
        description: path parameter takes the product id
        required: true
        type: string
      responses:
        "200":
          description: The product with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: nonexistent product or invalid id
        "500":
          description: couldnt get product
    delete:
      summary: Delete the product with given id
      tags:
        - Products
      parameters:
      - name: id
        in: path
        description: path parameter takes the product id
        required: true
        type: string
      responses:
        "200":
          description: Product Removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: nonexistent product or invalid id
        "500":
          description: couldnt delete product
    put:
      summary: Modify the product by id
      tags:
        - Products
      parameters:
      - name: id
        in: path
        description: path parameter takes the product id
        required: true
        type: string
      responses:
        "200":
          description: The product with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: nonexistent product or invalid id
        "500":
          description: couldnt get product      
  /api/products/{cat}:
    get:
      summary: get products by category
      tags:
        - Products
      parameters:
      - name: cat
        in: path
        description: path parameter takes the category
        required: true
        type: string
      responses:
        "200":
          description: returns the array of products by category
        "400":
          description: nonexistent category
        "500":
          description: couldnt get products



